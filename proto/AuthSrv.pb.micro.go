// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/AuthSrv.proto

package AuthSrv

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AuthSrv service

func NewAuthSrvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthSrv service

type AuthSrvService interface {
	CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...client.CallOption) (*CreatePersonResponse, error)
	GetPersonByTelegramID(ctx context.Context, in *GetPersonByTelegramIDRequest, opts ...client.CallOption) (*GetPersonByTelegramIDResponse, error)
	CheckPersonExistByTelegramID(ctx context.Context, in *CheckPersonExistByTelegramIDRequest, opts ...client.CallOption) (*CheckPersonExistByTelegramIDResponse, error)
	GetNearValidators(ctx context.Context, in *GetNearValidatorsRequest, opts ...client.CallOption) (*GetNearValidatorsResponse, error)
	SetAdmin(ctx context.Context, in *SetAdminRequest, opts ...client.CallOption) (*SetAdminResponse, error)
}

type authSrvService struct {
	c    client.Client
	name string
}

func NewAuthSrvService(name string, c client.Client) AuthSrvService {
	return &authSrvService{
		c:    c,
		name: name,
	}
}

func (c *authSrvService) CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...client.CallOption) (*CreatePersonResponse, error) {
	req := c.c.NewRequest(c.name, "AuthSrv.CreatePerson", in)
	out := new(CreatePersonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSrvService) GetPersonByTelegramID(ctx context.Context, in *GetPersonByTelegramIDRequest, opts ...client.CallOption) (*GetPersonByTelegramIDResponse, error) {
	req := c.c.NewRequest(c.name, "AuthSrv.GetPersonByTelegramID", in)
	out := new(GetPersonByTelegramIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSrvService) CheckPersonExistByTelegramID(ctx context.Context, in *CheckPersonExistByTelegramIDRequest, opts ...client.CallOption) (*CheckPersonExistByTelegramIDResponse, error) {
	req := c.c.NewRequest(c.name, "AuthSrv.CheckPersonExistByTelegramID", in)
	out := new(CheckPersonExistByTelegramIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSrvService) GetNearValidators(ctx context.Context, in *GetNearValidatorsRequest, opts ...client.CallOption) (*GetNearValidatorsResponse, error) {
	req := c.c.NewRequest(c.name, "AuthSrv.GetNearValidators", in)
	out := new(GetNearValidatorsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSrvService) SetAdmin(ctx context.Context, in *SetAdminRequest, opts ...client.CallOption) (*SetAdminResponse, error) {
	req := c.c.NewRequest(c.name, "AuthSrv.SetAdmin", in)
	out := new(SetAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthSrv service

type AuthSrvHandler interface {
	CreatePerson(context.Context, *CreatePersonRequest, *CreatePersonResponse) error
	GetPersonByTelegramID(context.Context, *GetPersonByTelegramIDRequest, *GetPersonByTelegramIDResponse) error
	CheckPersonExistByTelegramID(context.Context, *CheckPersonExistByTelegramIDRequest, *CheckPersonExistByTelegramIDResponse) error
	GetNearValidators(context.Context, *GetNearValidatorsRequest, *GetNearValidatorsResponse) error
	SetAdmin(context.Context, *SetAdminRequest, *SetAdminResponse) error
}

func RegisterAuthSrvHandler(s server.Server, hdlr AuthSrvHandler, opts ...server.HandlerOption) error {
	type authSrv interface {
		CreatePerson(ctx context.Context, in *CreatePersonRequest, out *CreatePersonResponse) error
		GetPersonByTelegramID(ctx context.Context, in *GetPersonByTelegramIDRequest, out *GetPersonByTelegramIDResponse) error
		CheckPersonExistByTelegramID(ctx context.Context, in *CheckPersonExistByTelegramIDRequest, out *CheckPersonExistByTelegramIDResponse) error
		GetNearValidators(ctx context.Context, in *GetNearValidatorsRequest, out *GetNearValidatorsResponse) error
		SetAdmin(ctx context.Context, in *SetAdminRequest, out *SetAdminResponse) error
	}
	type AuthSrv struct {
		authSrv
	}
	h := &authSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthSrv{h}, opts...))
}

type authSrvHandler struct {
	AuthSrvHandler
}

func (h *authSrvHandler) CreatePerson(ctx context.Context, in *CreatePersonRequest, out *CreatePersonResponse) error {
	return h.AuthSrvHandler.CreatePerson(ctx, in, out)
}

func (h *authSrvHandler) GetPersonByTelegramID(ctx context.Context, in *GetPersonByTelegramIDRequest, out *GetPersonByTelegramIDResponse) error {
	return h.AuthSrvHandler.GetPersonByTelegramID(ctx, in, out)
}

func (h *authSrvHandler) CheckPersonExistByTelegramID(ctx context.Context, in *CheckPersonExistByTelegramIDRequest, out *CheckPersonExistByTelegramIDResponse) error {
	return h.AuthSrvHandler.CheckPersonExistByTelegramID(ctx, in, out)
}

func (h *authSrvHandler) GetNearValidators(ctx context.Context, in *GetNearValidatorsRequest, out *GetNearValidatorsResponse) error {
	return h.AuthSrvHandler.GetNearValidators(ctx, in, out)
}

func (h *authSrvHandler) SetAdmin(ctx context.Context, in *SetAdminRequest, out *SetAdminResponse) error {
	return h.AuthSrvHandler.SetAdmin(ctx, in, out)
}
